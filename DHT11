
// PIC16F877A Configuration Bit Settings

// 'C' source line config statements

// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.

#include <xc.h>

#define Data_Out RA1         /* assign Port pin for data*/
#define Data_In RA1  /* read data from Port pin*/
#define Data_Dir TRISA1 /* Port direction */
#define _XTAL_FREQ 20000000     /* define _XTAL_FREQ for using internal delay */


void DHT11_Start();
void DHT11_CheckResponse();
char DHT11_ReadData();

void main() 
{
    TRISB=0x00;
    TRISC0=0x00;
    char RH_Decimal,RH_Integral,T_Decimal,T_Integral;
    char value[10];    

    ADCON1=0x0F;    /* this makes all pins as a digital I/O pins */    
    while(1)
{   
    DHT11_Start();  /* send start pulse to DHT11 module */
    DHT11_CheckResponse();  /* wait for response from DHT11 module */
    
    /* read 40-bit data from DHT11 module */
    RH_Integral = DHT11_ReadData();  /* read Relative Humidity's integral value */
    RH_Decimal = DHT11_ReadData();   /* read Relative Humidity's decimal value */
    T_Integral = DHT11_ReadData();   /* read Temperature's integral value */
    T_Decimal = DHT11_ReadData();    /* read Relative Temperature's decimal value */
 

        PORTB=RH_Integral;
        PORTC=RH_Decimal;

    
}   
    
}

char DHT11_ReadData()
{
  char i,data = 0;  
    for(i=0;i<8;i++)
    {
        while(!(Data_In & 1));  /* wait till 0 pulse, this is start of data pulse */
        __delay_us(30);         
        if(Data_In & 1)  /* check whether data is 1 or 0 */    
          data = ((data<<1) | 1); 
        else
          data = (data<<1);  
        while(Data_In & 1);
    }
  return data;
}

void DHT11_Start()
{    
    Data_Dir = 0;  /* set as output port */
    Data_Out = 0;  /* send low pulse of min. 18 ms width */
    __delay_ms(18);
    Data_Out = 1;  /* pull data bus high */
    __delay_us(20);
    Data_Dir = 1;  /* set as input port */    
}

void DHT11_CheckResponse()
{
    while(Data_In & 1);  /* wait till bus is High */     
    while(!(Data_In & 1));  /* wait till bus is Low */
    while(Data_In & 1);  /* wait till bus is High */
}
